//import chisel3.iotesters._
//import org.scalatest._
//import chisel3._
//
//class test(dut: SystolicArray) extends PeekPokeTester(dut) {
//  for(i <- 0 until 16){
//    for(j <- 0 until 3){
//      poke(dut.io.input(i)(j),0.U(8.W))
//    }
//  }
//  poke(dut.io.initEn,0.U)
//  poke(dut.io.inputNum,0.U(4.W))
//  for(i <- 0 until 3){
//    poke(dut.io.weightIn(i),0.U(8.W))
//  }
//  poke(dut.io.weightInEn,0.U(1.W))
//  poke(dut.io.PsumINEn,0.U(1.W))
//  poke(dut.io.PsumIN,0.U(16.W))
//  step(2)
//
//  poke(dut.io.weightInEn,1.U(1.W))
//  poke(dut.io.weightIn(0),1.U(8.W))
//  poke(dut.io.weightIn(1),1.U(8.W))
//  poke(dut.io.weightIn(2),1.U(8.W))
//  poke(dut.io.PsumINEn,1.U(1.W))
//  poke(dut.io.PsumIN,1.U(16.W))
//  step(1)
//  poke(dut.io.PsumIN,2.U(16.W))
//  step(255)
//  poke(dut.io.PsumINEn,0.U(1.W))
//  step(512)
//  poke(dut.io.weightInEn,0)
////  expect(dut.io.weightFull,1)
////  expect(dut.io.weightInPE(0),1)
//  step(1)
//  poke(dut.io.inputNum,0)
//  poke(dut.io.initEn,1)
//  step(1)
//  poke(dut.io.input(0)(0),1)
//  poke(dut.io.input(0)(1),2)
//  poke(dut.io.input(0)(2),1)
//  step(3)
////  poke(dut.io.input(1)(0),1)
////  poke(dut.io.input(1)(1),2)
////  poke(dut.io.input(1)(2),1)
////  step(3)
////  poke(dut.io.input(2)(0),1)
////  poke(dut.io.input(2)(1),2)
////  poke(dut.io.input(2)(2),1)
////  step(3)
////  poke(dut.io.input(3)(0),1)
////  poke(dut.io.input(3)(1),2)
////  poke(dut.io.input(3)(2),1)
////  step(3)
////  poke(dut.io.input(4)(0),1)
////  poke(dut.io.input(4)(1),2)
////  poke(dut.io.input(4)(2),1)
////  step(3)
////  poke(dut.io.input(5)(0),1)
////  poke(dut.io.input(5)(1),2)
////  poke(dut.io.input(5)(2),1)
////  step(3)
////  poke(dut.io.input(6)(0),1)
////  poke(dut.io.input(6)(1),2)
////  poke(dut.io.input(6)(2),1)
////  step(3)
////  poke(dut.io.input(7)(0),1)
////  poke(dut.io.input(7)(1),2)
////  poke(dut.io.input(7)(2),1)
////  step(3)
////  poke(dut.io.input(8)(0),1)
////  poke(dut.io.input(8)(1),2)
////  poke(dut.io.input(8)(2),1)
////  step(3)
////  poke(dut.io.input(9)(0),1)
////  poke(dut.io.input(9)(1),2)
////  poke(dut.io.input(9)(2),1)
////  step(3)
////  poke(dut.io.input(10)(0),1)
////  poke(dut.io.input(10)(1),2)
////  poke(dut.io.input(10)(2),1)
////  step(3)
////  poke(dut.io.input(11)(0),1)
////  poke(dut.io.input(11)(1),2)
////  poke(dut.io.input(11)(2),1)
////  step(3)
////  poke(dut.io.input(12)(0),1)
////  poke(dut.io.input(12)(1),2)
////  poke(dut.io.input(12)(2),1)
////  step(3)
////  poke(dut.io.input(13)(0),1)
////  poke(dut.io.input(13)(1),2)
////  poke(dut.io.input(13)(2),1)
////  step(3)
////  poke(dut.io.input(14)(0),1)
////  poke(dut.io.input(14)(1),2)
////  poke(dut.io.input(14)(2),1)
////  step(3)
////  poke(dut.io.input(15)(0),1)
////  poke(dut.io.input(15)(1),2)
////  poke(dut.io.input(15)(2),1)
////  step(3)
//  //expect(dut.io.inputQuValue(2),3)
//  //expect(dut.io.tcInPE(2),3)
//  //step(45)
//  step(4)
//  expect(dut.io.output(0)(0),13)
//  step(3)
//  expect(dut.io.output(0)(1),14)
//}
//
////class SystolicArray_tb extends FlatSpec with Matchers {
////  "PETEST " should "pass" in {
////    chisel3.iotesters.Driver.execute(Array("--generate-vcd-output", "on"), () => new SystolicArray(16, 16))
////    { c => new test(c)} should be (true)
////  }
////}